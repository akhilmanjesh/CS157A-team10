/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.93
 * Generated at: 2023-11-29 22:46:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.Properties;
import java.io.InputStream;
import java.sql.*;
import java.util.Properties;
import java.io.InputStream;

public final class view_005fteam_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/edit_team.jsp", Long.valueOf(1701079767240L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("java.io.InputStream");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <title>Organization</title>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"style.css\">\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        ");

        String db = "sot";
        Properties props = new Properties();
        InputStream input = getServletContext().getResourceAsStream("/WEB-INF/config.properties");
        props.load(input);
        input.close();
        String user = props.getProperty("db.username");
        String password = props.getProperty("db.password");
        Connection con = null;

        try {
            HttpSession sso = request.getSession(false);
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + db + "?autoReconnect=true&useSSL=false", user, password);
           
            String username = (String) sso.getAttribute("username");
            String orgName = request.getParameter("orgname");
            String teamName = request.getParameter("teamname");
            
      out.write("\r\n");
      out.write("            <a href = \"view_student_organization.jsp?orgname=");
      out.print(orgName);
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print(orgName);
      out.write(" </a><br>\r\n");
      out.write("            ");

            out.println(teamName + "<br> Team Members List: <br>");
            String query = "SELECT username FROM assignedTo WHERE teamname = ? AND orgname = ?";
            PreparedStatement ps = con.prepareStatement(query);   
            ps.setString(1, teamName);                  
            ps.setString(2, orgName);
            ResultSet rsTeams = ps.executeQuery();

            //Verify Owner
            query = "SELECT username FROM studentLeads WHERE username = ? AND orgname = ?";
            ps = con.prepareStatement(query);   
            ps.setString(1, username);
            ps.setString(2, orgName);
            ResultSet rs = ps.executeQuery();

            //Owner View
            if (rs.next()){
                while (rsTeams.next()){
                    
      out.write("\r\n");
      out.write("                        <a href= \"http://localhost:8080/SOT/remove_team_member.jsp?orgname=");
      out.print(orgName);
      out.write("&teamname=");
      out.print(teamName);
      out.write("&target=");
      out.print(rsTeams.getString(1));
      out.write("\"><button>Remove User</button></a>\r\n");
      out.write("                    ");

                    out.println(rsTeams.getString(1) + "<br>");
                }

                
      out.write("\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <title>Organization</title>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"style.css\">\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        ");


        try {
            sso = request.getSession(false);
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + db + "?autoReconnect=true&useSSL=false", user, password);
           
            username = (String) sso.getAttribute("username");
            orgName = request.getParameter("orgname");
            teamName = request.getParameter("teamname");
            
            //Display valid members to be added
            query = "SELECT username FROM memberofStudent WHERE orgname = ? AND username NOT IN (SELECT username FROM assignedTo WHERE teamname = ? AND orgname = ?)";
            ps = con.prepareStatement(query); 
            ps.setString(1, orgName);
            ps.setString(2, teamName);
            ps.setString(3, orgName);           
            ResultSet choice = ps.executeQuery();
            
      out.write("\r\n");
      out.write("            <form method=\"post\">\r\n");
      out.write("                Assign User to Team: \r\n");
      out.write("                <select name=\"userTarget\">\r\n");
      out.write("                    ");
while(choice.next()){
      out.write("\r\n");
      out.write("                        <option value=\"");
      out.print(choice.getString(1));
      out.write('"');
      out.write('>');
      out.print(choice.getString(1));
      out.write("</option>\r\n");
      out.write("                    ");
}
      out.write("\r\n");
      out.write("                </select>\r\n");
      out.write("                <br/><br/>\r\n");
      out.write("                <input type=\"submit\" value=\"Add\"/>\r\n");
      out.write("            </form>\r\n");
      out.write("            ");


            String userTarget = request.getParameter("userTarget");
            if (userTarget != null){
                query = "INSERT INTO assignedTo (username, teamname, orgname) VALUES (?, ?, ?)";
                ps = con.prepareStatement(query);
                ps.setString(1, userTarget);
                ps.setString(2, teamName);
                ps.setString(3, orgName);
                int rowsAffected = ps.executeUpdate();
                String redirectURL = "http://localhost:8080/SOT/view_team.jsp?orgname="+orgName+"&teamname="+teamName;
                response.sendRedirect(redirectURL);
            }
            
        } catch(SQLException e) {
            out.println("SQLException caught: " + e.getMessage()); 
        } 
        
      out.write("\r\n");
      out.write("        <script src=\"js/bootstrap.min.js\"></script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("                ");

            } else {
                //Member List
                while (rsTeams.next()){
                    out.println(rsTeams.getString(1) + "<br>");
                }
            }




        } catch(SQLException e) {
            out.println("SQLException caught: " + e.getMessage()); 
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    out.println("SQLException caught: " + e.getMessage());
                }
            }
        }

        
      out.write("\r\n");
      out.write("        <script src=\"js/bootstrap.min.js\"></script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
