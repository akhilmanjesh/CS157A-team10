/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.93
 * Generated at: 2023-11-30 21:16:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.Random;
import java.util.Properties;
import java.io.InputStream;

public final class create_005fproject_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("java.util.Random");
    _jspx_imports_classes.add("java.io.InputStream");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <title>Create Project Page</title>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <a href=\"http://localhost:8080/SOT/index.jsp\"><H1>Home</H1></a>\r\n");
      out.write("    <h3>Project Creation</h1>\r\n");
      out.write("    <form action= \"create_project.jsp\" method = \"post\">\r\n");
      out.write("      <p>Please fill in this form to create a project.</p>\r\n");
      out.write("        \r\n");
      out.write("      <label for=\"username\"><b>ProjectName</b></label>\r\n");
      out.write("      <input type=\"text\" placeholder=\"Enter Project Name\" name=\"projectName\" id=\"projectName\" required>\r\n");
      out.write("\r\n");
      out.write("      <label for=\"Desscription\"><b>Description</b></label>\r\n");
      out.write("      <input type=\"text\" placeholder=\"Enter Description\" name=\"description\" id=\"description\" required>\r\n");
      out.write("\r\n");
      out.write("      <label for=\"organization\"><b>Organization</b></label>\r\n");
      out.write("      <select name=\"organization\" id=\"organization\">\r\n");
      out.write("        \r\n");
      out.write("      \r\n");
      out.write("    ");
 
    String db = "sot";
        Properties props = new Properties();
        InputStream input = getServletContext().getResourceAsStream("/WEB-INF/config.properties");
        props.load(input);
        input.close();
        String user = props.getProperty("db.username");
        String password = props.getProperty("db.password");
        Connection con = null;

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + db + "?autoReconnect=true&useSSL=false", user, password);

          HttpSession sso = request.getSession(false);
          String username = (String) sso.getAttribute("username");

          String orgQuery = "SELECT orgname FROM membersofcompany WHERE username = ?";
          PreparedStatement orgPs = con.prepareStatement(orgQuery);
          orgPs.setString(1, username);
          ResultSet orgRs = orgPs.executeQuery();

          while(orgRs.next()) {
            String orgname = orgRs.getString("orgname");
            
      out.write("\r\n");
      out.write("            <option value=\"");
      out.print( orgname );
      out.write('"');
      out.write('>');
      out.print( orgname );
      out.write("</option>\r\n");
      out.write("            ");

          }
          orgRs.close();
          orgPs.close();
        
      out.write("\r\n");
      out.write("        </select>\r\n");
      out.write("        <button type=\"submit\" class=\"submitButton\">Submit</button>\r\n");
      out.write("    </form>\r\n");
      out.write("        ");

          String query = "SELECT MAX(projectid) AS last_id FROM project";
          PreparedStatement ps = con.prepareStatement(query);
          ResultSet rs1 = ps.executeQuery();
          int last_id = 0;

          if(rs1.next()) {
            last_id = rs1.getInt(1);
          } else {
              out.println("No records");
          }

          String projectName = request.getParameter("projectName");
          String projectDescription = request.getParameter("description");
          String projectOrgName = request.getParameter("organization");
            
          if ( projectName != null & projectDescription != null){
            PreparedStatement pstmt = con.prepareStatement("INSERT INTO project (projectid, projectname, projectdescription, orgname) VALUES (?, ?, ?, ?)");
            pstmt.setInt(1, last_id + 1);
            pstmt.setString(2, projectName);
            pstmt.setString(3, projectDescription);
            pstmt.setString(4, projectOrgName);
            pstmt.executeUpdate();
            pstmt.close();
            con.close();
            out.println("project created");
          }
            

        } catch(SQLException e) {
          out.println("SQLException caught: " + e.getMessage()); 
      } finally {
          if (con != null) {
              try {
                  con.close();
              } catch (SQLException e) {
                  out.println("SQLException caught: " + e.getMessage());
              }
          }
      }
    
      out.write("\r\n");
      out.write("      \r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
